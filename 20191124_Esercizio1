//Author: Filippo Venturini
//Date(Deadline): 20191124
//Notes: Esercizio 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main() {
	int nParole; //Numero di parole totali
	int verificaScanf;

	do {
		nParole = 0;
		verificaScanf = 0;
		printf("Quante parole vuoi inserire?:");
		verificaScanf = scanf("%d", &nParole);
		fflush(stdin); //Pulizia del buffer

		if (verificaScanf != 1 || nParole < 1) {
			printf("Valore inserito errato!\n"); //Messaggio di errore
		}
		
	} while (verificaScanf != 1 || nParole < 1);
	
	char **ptrPrincipale = (char**)malloc(nParole * sizeof(char*)); //Alloca dinamicamente uno spazio di memoria pari alle parole da inserire * la dimensione di un puntatore
	if (ptrPrincipale == NULL) { //Controllo per la malloc
		printf("MEMORIA INSUFFICENTE!");
		return 0; //Uscita dal programma
	}
	getchar();
	char **ptrScorrimento = ptrPrincipale; //Puntatore per lo scorrimento della memoria
	char carattereCorrente;
	int dimParola = 5;
	verificaScanf = 0; //Resetta la variabile per la verifica dello scanf
	for (int i = 0; i < nParole; i++) {
		int numCaratteri = 0;
		*ptrScorrimento = (char*)malloc(dimParola+1); //Alloca dinamicamente uno spazio pari alla dimensione della stringa nell'Heap
		printf("Inserisci la parola %d: ", i + 1); //Richiede l'inserimento della parola
		while ((carattereCorrente = getchar())!='\n') {
			if (numCaratteri == dimParola) { //Se la dimensione della parola supera lo spazio disponibile
				dimParola *= 2; //Raddoppia la dimensione
				*ptrScorrimento = realloc(*ptrScorrimento, dimParola); //Realloca la memoria con piÃ¹ spazio
				if (*ptrScorrimento == NULL) { //Controllo per la realloc
					printf("MEMORIA INSUFFICENTE!");
					return 0; //Uscita dal programma
				}
			}
			*(*ptrScorrimento + numCaratteri) = carattereCorrente; //Assegna il carattere
			numCaratteri++;
		}
		*(*ptrScorrimento + numCaratteri) = '\0';
		if (ptrScorrimento == NULL) { //Controllo per la malloc
			printf("MEMORIA INSUFFICENTE!");
			return 0; //Uscita dal programma
		}

		if (i != nParole - 1) { //Avanza solo se non punta all'ultimo elemento
			ptrScorrimento++; //Avanza lo scorrimento dei puntatori
		}
	}
	
	ptrScorrimento = ptrPrincipale;//Resetta il puntatore per lo scorrimento al primo indirizzo di memoria
	for (int i = 0; i < nParole; i++) { //Ciclo per tutte le parole
		for (int j = 0; j < strlen(*ptrScorrimento); j++) { //Per ogni carattere della parola
			printf("%c", toupper(*(*ptrScorrimento + j))); //Converte in maiuscolo ogni carattere e lo printa
		}
		printf("\n");
		free(*ptrScorrimento); //Libera la memoria allocata per ogni parola
		ptrScorrimento++;
	}
	free(ptrPrincipale); //Libera tutta la memoria allocata per l'array di puntatori
	getchar();
																 																														  
	return 0;
}
