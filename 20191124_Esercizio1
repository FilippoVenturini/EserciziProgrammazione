//Author: Filippo Venturini
//Date(Deadline): 20191124
//Notes: Esercizio 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main() {
	int nParole = 0; //Numero di parole totali
	int verificaScanf = 0;

	do {
		printf("Quante parole vuoi inserire?: ");
		verificaScanf = scanf("%d", &nParole);
		fflush(stdin); //Pulizia del buffer

		if (verificaScanf != 1)
			printf("Valore inserito errato!"); //Messaggio di errore
	} while (verificaScanf != 1);
	
	char **ptrPrincipale = (char**)malloc(nParole * sizeof(char**)); //Alloca dinamicamente uno spazio di memoria pari alle parole da inserire * la dimensione di un puntatore
	char **ptrScorrimento = ptrPrincipale; //Puntatore per lo scorrimento della memoria
	char strCorrente[100];
	verificaScanf = 0; //Resetta la variabile per la verifica dello scanf
	for (int i = 0; i < nParole; i++) {
		do {
			printf("Inserisci la parola %d: ", i + 1); //Richiede l'inserimento della parola
			verificaScanf = scanf("%s", &strCorrente);
			fflush(stdin);//Pulizia del buffer
			if (verificaScanf != 1)
				printf("Valore inserito errato!"); //Messaggio di errore
		} while (verificaScanf != 1);
		
		*ptrScorrimento = (char*)malloc(strlen(strCorrente)+1); //Alloca dinamicamente uno spazio pari alla dimensione della stringa nell'Heap
		strcpy(*ptrScorrimento, strCorrente); //Copia il contenuto della variabile temporanea nello spazio allocato

		if (i != nParole - 1) { //Avanza solo se non punta all'ultimo elemento
			ptrScorrimento++; //Avanza lo scorrimento dei puntatori
		}
	}
	
	ptrScorrimento = ptrPrincipale;//Resetta il puntatore per lo scorrimento al primo indirizzo di memoria
	for (int i = 0; i < nParole; i++) { //Ciclo per tutte le parole
		for (int j = 0; j < strlen(*ptrScorrimento); j++) { //Per ogni carattere della parola
			printf("%c", toupper(*(*ptrScorrimento + j))); //Converte in maiuscolo ogni carattere e lo printa
		}
		printf("\n");
		free(*ptrScorrimento); //Libera la memoria allocata per ogni parola
		ptrScorrimento++;
	}
	free(ptrPrincipale); //Libera tutta la memoria allocata per l'array di puntatori
	getchar();
	getchar();
																 																														  
	return 0;
}
