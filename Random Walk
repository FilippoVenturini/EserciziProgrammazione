//Author: Filippo Venturini
//Date(DeadLine): 10112019
//Notes: RandomWalk
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdbool.h> //Per l'utilizzo dei booleani
#define MAX 10
#define SU 0
#define DESTRA 1
#define GIU 2
#define SINISTRA 3

void main() {

	char campo[MAX][MAX]; //Crea la matrice
	char alfabeto [] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'}; //Array per le lettere dell'alfabeto
	bool fine = false; 
	bool casellaLibera = true; //Booleano per la disponibilit√† della casella
	int caselleOccupate = 0; //Contatore delle caselle occupate
	int rndDirezione = 0; //Random per la direzione
	int indiceAlfabeto = 0;

	for (int r = 0; r < MAX; r++) { //Cicli per l'inizializzazione
		for (int c = 0; c < MAX; c++) {
			campo[r][c] = '-';  //Inizializza il campo			
		}
	}

	srand(time(NULL)); //Generazione di un seed random con la libreria time
	int Riga = (rand() % (9 - 0 + 1)) + 0; //Generazione di un numero random per la riga
	int Colonna = (rand() % (9 - 0 + 1)) + 0; //Generazione di un numero random per la colonna

	campo[Riga][Colonna] = alfabeto[indiceAlfabeto]; //Inserisce la prima lettera dell'alfabeto in una posizione random
	indiceAlfabeto++; //Incrementa l'indice

	while (fine == false) {
		rndDirezione = (rand() % (3 - 0 + 1)) + 0; //Genera la direzione random
		switch (rndDirezione)
		{
		case SU:
			if (campo[Riga-1][Colonna] != '-' || Riga-1 < 0) { //Controlla che la casella non sia occupata e che non esca dai limiti
				casellaLibera = false;
				break;
			}
			else
				--Riga;			
			break;
		case DESTRA:
			if (campo[Riga][Colonna+1] != '-' || Colonna + 1 >= MAX) { //Controlla che la casella non sia occupata e che non esca dai limiti
				casellaLibera = false;
				break;
			}
			else
				++Colonna;
			break;
		case GIU:
			if (campo[Riga+1][Colonna] != '-' || Riga + 1 >= MAX) { //Controlla che la casella non sia occupata e che non esca dai limiti
				casellaLibera = false;
				break;
			}
			else
				++Riga;
			break;
		case SINISTRA:
			if (campo[Riga][Colonna-1] != '-' || Colonna-1 < 0) { //Controlla che la casella non sia occupata e che non esca dai limiti
				casellaLibera = false;
				break;
			}
			else
				--Colonna;
			break;
		}
		if (!casellaLibera) {
			++caselleOccupate; //Incrementa il numero di caselle occupate
			if (caselleOccupate == 4)
				fine = true; //Se sono occupate tutte e 4 finisce il gioco
			continue; //Continua fino alla fine del ciclo
		}

		campo[Riga][Colonna] = alfabeto[indiceAlfabeto]; //Assegna la lettera
		caselleOccupate = 0; //Se cambia casella le caselle occupate vengono azzerate
		casellaLibera = true;
		indiceAlfabeto++; //Incrementa l'indice dell'alfabeto
	}

	//Cicli per il print del campo di gioco	
	for (int r = 0; r < MAX; r++) {
		for (int c = 0; c < MAX; c++) {
			printf("%c", campo[r][c]); //Printa il carattere
		}
		printf("\n"); //Va a capo alla fine della riga
	}
	getchar();
}
